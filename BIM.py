import random
import statistics
from disjoint_set import DisjointSet
from math import comb


# Network
edges_number = 30
nodes_number = 20
edges = (
    (1, 2), (1, 5), (1, 8), (2, 3), (2, 10), (3, 4), (3, 12), (4, 5), (4, 14), (5, 6),
    (6, 7), (6, 15), (7, 8), (7, 17), (8, 9), (9, 10), (9, 18), (10, 11), (11, 12), (11, 19),
    (12, 13), (13, 14), (13, 20), (14, 15), (15, 16), (16, 17), (16, 20), (17, 18), (18, 19), (19, 20)
)

# Terminals:
T1 = 4
T2 = 10
T3 = 17

# Repetitions
M = [1000, 10000]

# Edge reliability
p_range=(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99)


# Check network model connectivity
def checkConnectivity(ds):
    return ds.connected(T1, T2) and ds.connected(T2, T3)



def calcSpectra(M):
    Z = [[0]*edges_number for i in range(edges_number)]
    Y = [0] * edges_number
    shuffledEdges = list(edges)

    for m in range(M):
        random.shuffle(shuffledEdges)
        ds = DisjointSet.from_iterable(range(1, nodes_number + 1))

        for r in range(1, edges_number + 1):
            ds.union(shuffledEdges[r-1][0], shuffledEdges[r-1][1])

            if checkConnectivity(ds):
                Y[r-1] += 1
                for j in range(1, edges_number + 1):
                    if edges[j-1] in shuffledEdges[:r]:
                        Z[r-1][j-1] += 1

    return [y/M for y in Y], [[zz/M for zz in z] for z in Z]

    

def calcBim(Y, Z, p):
    bim = [0] * edges_number
    q = 1 - p
    n = edges_number

    for j in range(1, edges_number + 1):
        for i in range(1, edges_number + 1):
            bim[j-1] += comb(n, i) * ((Z[i-1][j-1] * p**(i-1) * q**(n - i)) - ((Y[i-1] - Z[i-1][j-1]) * p**i * q**(n-i-1)))
            
    return bim


# bim = (calcBim(*calcSpectra(10_000), 0.7))
# bims = []

# for i in range(edges_number):
#    bims.append((i+1, bim[i]))

# bims.sort(key=lambda x: x[1], reverse=True)
# for i in bims:
#     print(str(i)+",")


# 1, 2
print("\n#1")
cumulativeCS_1000, bimSpectrum_1000 = calcSpectra(1000)
cumulativeCS_10000, bimSpectrum_10000 = calcSpectra(10000)
print("Cumulative Destruction Spectra:")
print(f" i M={M[0]} M={M[1]}")
for i in range(edges_number - 1, -1, -1):
    print(f"{30 - i:>2} {cumulativeCS_1000[i]:>6} {cumulativeCS_10000[i]:>7}")


# 3
print("\n#3")

precalculated_BIM = [
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.0, 1.67e-06, 1.67e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 1.67e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.67e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 1.67e-06, 0.0, 0.0, 0.0, 1.67e-06, 0.0, 0.0, 0.0],
    [2.13e-06, 1.397e-05, 1.496e-05, 4.25e-06, 2.86e-06, 2.28e-06, 3.08e-06, 2.62e-06, 1.593e-05, 2.03e-06, 1.58e-06, 5.3e-07, 5.1e-07, 1.53e-06, 4.5e-07, 1.43e-06, 1.524e-05, 1.47e-06, 4.3e-07, 4.1e-07, 1.3e-06, 4.36e-06, 1.429e-05, 1.34e-06, 5.2e-07, 2.4e-06, 1.529e-05, 1.49e-06, 1.36e-06, 2.33e-06],
    [2.345e-05, 6.87e-05, 7.716e-05, 3.971e-05, 2.711e-05, 2.362e-05, 2.683e-05, 2.335e-05, 8.245e-05, 2.071e-05, 1.606e-05, 7.9e-06, 8.38e-06, 1.572e-05, 7.43e-06, 1.705e-05, 7.849e-05, 1.56e-05, 7.58e-06, 8e-06, 1.571e-05, 3.892e-05, 7.031e-05, 1.536e-05, 7.42e-06, 2.271e-05, 8.086e-05, 1.545e-05, 1.708e-05, 2.328e-05],
    [0.00011974, 0.00025938, 0.00030141, 0.00019201, 0.00013484, 0.00011983, 0.00013531, 0.00012205, 0.00031544, 0.00011648, 9.272e-05, 5.4e-05, 5.862e-05, 8.962e-05, 5.269e-05, 0.00010224, 0.0003037, 8.772e-05, 5.322e-05, 5.828e-05, 8.898e-05, 0.00019047, 0.00026194, 9.131e-05, 5.529e-05, 0.00011814, 0.00031322, 8.901e-05, 0.00010221, 0.00012106],
    [0.00047424, 0.00082927, 0.00097358, 0.00071116, 0.00051755, 0.00047082, 0.00051977, 0.00047699, 0.00100952, 0.00048288, 0.00039052, 0.00025877, 0.00027853, 0.00037993, 0.00025454, 0.00044409, 0.00097619, 0.00036916, 0.00025823, 0.00028134, 0.00038037, 0.00070826, 0.00082661, 0.00038811, 0.00027125, 0.00045929, 0.00100816, 0.00037119, 0.00044363, 0.00047495],
    [0.00151892, 0.00229991, 0.00272788, 0.00216753, 0.0016323, 0.00151759, 0.0016374, 0.00152519, 0.00280062, 0.00162161, 0.00132864, 0.00096253, 0.00103446, 0.00130315, 0.00095896, 0.00154027, 0.00273375, 0.00126195, 0.00096785, 0.00103995, 0.00130466, 0.00216079, 0.00230221, 0.00132571, 0.00100864, 0.00147023, 0.00279803, 0.00126304, 0.00153398, 0.00152455],
    [0.00420094, 0.00573678, 0.00680751, 0.00572195, 0.00444332, 0.00421023, 0.00445471, 0.00420766, 0.00690814, 0.00463691, 0.00385736, 0.0030037, 0.00320774, 0.00379399, 0.00298409, 0.00448498, 0.00680069, 0.00367093, 0.00301726, 0.00320808, 0.00380292, 0.00571637, 0.00572862, 0.00384595, 0.0031171, 0.00406759, 0.00690993, 0.00367426, 0.00447669, 0.0042262],
    [0.01043464, 0.01317484, 0.01552336, 0.01359858, 0.01090527, 0.01048316, 0.01091362, 0.01042375, 0.01563614, 0.01174456, 0.00991922, 0.00817096, 0.00864635, 0.00977382, 0.00808222, 0.01151279, 0.01550999, 0.0095028, 0.0081894, 0.00864733, 0.00978896, 0.01360598, 0.01317134, 0.0099088, 0.00841505, 0.01011004, 0.01563922, 0.0095055, 0.01150123, 0.01049628],
    [0.02358598, 0.02804909, 0.03264055, 0.0295674, 0.02439906, 0.02372621, 0.02440816, 0.02356681, 0.03270894, 0.02676293, 0.02297334, 0.01982408, 0.02079695, 0.0227464, 0.01959926, 0.02647206, 0.03265502, 0.02214857, 0.019816, 0.02079167, 0.02274666, 0.02958304, 0.02804876, 0.0229539, 0.02028255, 0.02292029, 0.03270954, 0.02216596, 0.02647526, 0.02374508],
    [0.04903854, 0.05564924, 0.06370443, 0.05928738, 0.05028496, 0.04937439, 0.05030853, 0.04901589, 0.06365196, 0.05558058, 0.04852482, 0.04346147, 0.04523406, 0.04815457, 0.04299673, 0.05528587, 0.0637251, 0.04711869, 0.04346471, 0.04521057, 0.04817933, 0.05927916, 0.05565367, 0.04849828, 0.04421503, 0.04784427, 0.0636271, 0.04712863, 0.05528691, 0.04939213],
    [0.09402817, 0.10269467, 0.11531222, 0.10969148, 0.09572874, 0.09460126, 0.0957619, 0.09401194, 0.11505692, 0.10547547, 0.09380277, 0.08665602, 0.08945602, 0.0932847, 0.08585646, 0.10522149, 0.11530684, 0.09173603, 0.08667232, 0.08947559, 0.09328644, 0.10967397, 0.10273194, 0.09377867, 0.08773371, 0.09207892, 0.11503247, 0.0917722, 0.10521131, 0.094594],
    [0.16553796, 0.17554476, 0.19281042, 0.18665346, 0.16750799, 0.16629434, 0.16753351, 0.16554835, 0.19241401, 0.18257584, 0.16571899, 0.15696051, 0.16075531, 0.16507978, 0.15586977, 0.18236667, 0.19285136, 0.16315017, 0.15697797, 0.16078297, 0.1650961, 0.18664382, 0.17555739, 0.16567773, 0.15824767, 0.16282835, 0.19239198, 0.16316294, 0.18235868, 0.16630614],
    [0.26530312, 0.27517936, 0.29557468, 0.28994659, 0.2671341, 0.26601207, 0.26715567, 0.26529974, 0.2952348, 0.28668277, 0.26566471, 0.25654387, 0.26087826, 0.2649916, 0.25533876, 0.28644387, 0.29564777, 0.263119, 0.25656822, 0.26093918, 0.26500997, 0.28992519, 0.27519469, 0.26564874, 0.25776838, 0.26204754, 0.29514858, 0.2631189, 0.28645453, 0.26600632],
    [0.38287288, 0.39118348, 0.41175326, 0.40746263, 0.38419914, 0.38328459, 0.38419871, 0.38286822, 0.4115881, 0.40540897, 0.38310817, 0.37509959, 0.37928589, 0.38254811, 0.37419451, 0.40510695, 0.41184725, 0.38122754, 0.37510275, 0.37930277, 0.38253786, 0.40744311, 0.39115967, 0.38311751, 0.37599903, 0.37950348, 0.41149697, 0.38122811, 0.40514509, 0.38329602],
    [0.49695896, 0.50307035, 0.52123444, 0.5185385, 0.49771149, 0.49711579, 0.49765551, 0.4968878, 0.52125183, 0.51745005, 0.49705161, 0.49092551, 0.494433, 0.49663361, 0.49039077, 0.51721672, 0.52133997, 0.49592464, 0.49091475, 0.49445224, 0.49665029, 0.51849711, 0.50304325, 0.4970663, 0.49149417, 0.49393451, 0.52113717, 0.49594789, 0.51724464, 0.49710853],
    [0.59356165, 0.5976088, 0.6120719, 0.61060868, 0.59392417, 0.5935499, 0.59391845, 0.59350261, 0.61218423, 0.61014924, 0.5935901, 0.58944951, 0.59206109, 0.59332967, 0.58924658, 0.60998679, 0.61215367, 0.59303702, 0.58946846, 0.59206531, 0.59335159, 0.61056071, 0.59756226, 0.59357379, 0.58975441, 0.59121459, 0.61207085, 0.59303317, 0.61008393, 0.59360208],
    [0.67045052, 0.67287211, 0.6834227, 0.68280033, 0.67059446, 0.67041784, 0.67058823, 0.67040132, 0.68357472, 0.68261339, 0.67047246, 0.66799643, 0.66970052, 0.67029502, 0.6679496, 0.6825423, 0.68346485, 0.67026998, 0.66799731, 0.66970527, 0.67036293, 0.68270894, 0.67282525, 0.67044089, 0.66813577, 0.6688932, 0.68343733, 0.67021238, 0.68259169, 0.670453],
    [0.73151878, 0.73281657, 0.73985223, 0.73969448, 0.73159724, 0.73149462, 0.73161062, 0.73150399, 0.74005802, 0.73961814, 0.73153288, 0.73026316, 0.73123966, 0.73143665, 0.73027872, 0.73958824, 0.7398972, 0.73150329, 0.73026705, 0.73124347, 0.73148848, 0.73962113, 0.73276285, 0.73151957, 0.73033345, 0.73066441, 0.73988396, 0.73147163, 0.73961798, 0.73153433],
    [0.78179883, 0.78234806, 0.7865564, 0.78658825, 0.78177475, 0.78174253, 0.78182811, 0.78172575, 0.78674774, 0.7865707, 0.78176787, 0.78117885, 0.78167014, 0.78168074, 0.7812478, 0.7865488, 0.78662151, 0.78178848, 0.78121941, 0.78170016, 0.78176462, 0.78654539, 0.78231109, 0.78172612, 0.78125655, 0.78136675, 0.78663184, 0.78177455, 0.7866061, 0.78174763],
    [0.82492551, 0.82514738, 0.82732079, 0.82742303, 0.82491051, 0.82489471, 0.82497322, 0.82489309, 0.82748843, 0.82741657, 0.82492689, 0.82470412, 0.82493766, 0.82484338, 0.8247794, 0.82735659, 0.82736182, 0.82496806, 0.82472646, 0.82494321, 0.82494652, 0.82737861, 0.82510184, 0.82488587, 0.82478485, 0.82482518, 0.82739678, 0.82495536, 0.82741666, 0.82493],
    [0.86354126, 0.86355908, 0.86447795, 0.86455597, 0.86352175, 0.86348576, 0.86356318, 0.86350814, 0.86460033, 0.86454929, 0.86349542, 0.8634795, 0.8635333, 0.86344659, 0.86351799, 0.86449544, 0.86446319, 0.86351496, 0.86349137, 0.86353108, 0.86353554, 0.86449846, 0.86353712, 0.86349302, 0.86351781, 0.86353375, 0.86455748, 0.86354832, 0.86452404, 0.86352305],
    [0.89929148, 0.89925966, 0.89949176, 0.89953783, 0.89925287, 0.89922638, 0.89927409, 0.89925358, 0.89956974, 0.8995512, 0.89924646, 0.89926557, 0.89925646, 0.89921704, 0.899274, 0.89948323, 0.89949862, 0.89924714, 0.89925488, 0.89926781, 0.89927298, 0.89951056, 0.899251, 0.89923689, 0.89927203, 0.89930934, 0.89954499, 0.8992598, 0.89950901, 0.89924889],
    [0.93333236, 0.93336098, 0.93333566, 0.93334611, 0.93332052, 0.93330775, 0.9333445, 0.93329527, 0.93334364, 0.93335696, 0.93330902, 0.93333928, 0.9333498, 0.93330535, 0.93333935, 0.93333448, 0.93332251, 0.93331736, 0.93331373, 0.93333646, 0.93333357, 0.9333269, 0.9333181, 0.93332185, 0.93334693, 0.93336029, 0.93336544, 0.93335146, 0.93332778, 0.93333659],
    [0.96666406, 0.96666172, 0.96667634, 0.96666498, 0.96666133, 0.96665031, 0.96666913, 0.9666486, 0.96666121, 0.96669603, 0.96664525, 0.96667692, 0.96667827, 0.96664982, 0.96668486, 0.96665349, 0.96667208, 0.9666448, 0.96665853, 0.96669665, 0.96666533, 0.96664511, 0.96665553, 0.96666299, 0.96666117, 0.96668537, 0.9667013, 0.96666777, 0.96666803, 0.96667302],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
]

CSS_sum = [None] * edges_number
for position in range(edges_number):
    CSS_sum[position] = (position + 1, sum(line[position] for line in precalculated_BIM))

# print([i[1] for i in sorted(CSS_sum, key=lambda x:x[1], reverse=True)])

# tmp = list(enumerate(calcBim(cumulativeCS_10000, bimSpectrum_10000, 0.7)))
# tmp = [(x+1, y) for x,y in tmp]
# # print(sorted(tmp, key=lambda x:x[1], reverse=True))

# print("Groups by importance:")
# print("\t1: 17, 9, 3, 27, 4, 22, 10, 29, 16")
# print("\t2: 2, 23")
# print("\t3: 7, 5, 9, 30, 6, 1, 8, 11, 24, 21, 14, 28, 18, 26")
# print("\t4: 20, 13, 25, 19, 12, 15")

# Automatic clusterisation
from sklearn.cluster import KMeans
import numpy as np

num_groups = 4
edge_numbers = [i[0] for i in CSS_sum]
data = np.array([i[1] for i in CSS_sum])
data = data.reshape(-1, 1)

kmeans = KMeans(n_clusters=num_groups, random_state=42)
kmeans.fit(data)
cluster_labels = kmeans.labels_

clusters = [[] for _ in range(num_groups)]
for value, label, cluster in zip(data.flatten(), edge_numbers, cluster_labels):
    clusters[cluster].append((value, label))

sorted_clusters = sorted(clusters, key=lambda x: -np.mean([pair[0] for pair in x]))

print("Groups by importance:")
for i, cluster_data in enumerate(sorted_clusters):
    print(f"Group {i + 1} (mean: {np.mean([i[0] for i in cluster_data]):.3f}): {[i[1] for i in cluster_data]}")



a, b, c, d = [[i[0] for i in sorted(CSS_sum, key=lambda x:x[1], reverse=True)][i] for i in [0,1,-1,-2]]
print("\nBIM Spectra for selected edges:")
print("            b e s t                w o r s t        ")
print(f"      edge {a:<2}     edge {b:<2}     edge {c:<2}     edge {d:<2}")
print(" i  1000 10000  1000 10000  1000 10000  1000 10000")

for i, line_1000, line_10000 in zip(range(1, edges_number+1), bimSpectrum_1000, bimSpectrum_10000):
    print(f"{i:>2}  ", end="")
    for row in (a, b, c, d):
        print(f"{line_1000[row-1]:>.2f} {line_10000[row-1]:>.3f}  ", end="")
    print()



# 4
print("\n#4")

print("BIMs and Gain in Reliability:")
print("                b e s t                        w o r s t        ")
print(" p   ", end="")
for i in a, b, c, d:
    print(f"{f'BIM({i})':7}", "BIM*dp  ", end="")
print()
for p in 0.4, 0.5, 0.6, 0.7, 0.8, 0.9:
    bim = calcBim(cumulativeCS_10000, bimSpectrum_10000, p)
    print(f"{p:>2}", end="")
    for i in a, b, c, d:
        if bim[i-1] >= 0:
            print(f"  {bim[i-1]:>.5f} {bim[i-1]*(1-p):>.4f}", end="")
        else:
            print(f"  {bim[i-1]:>.4f} {bim[i-1]*(1-p):>.3f}", end="")

    print()